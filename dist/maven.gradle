apply plugin: 'maven'
apply plugin: 'signing'

def distInfo = ext.distInfo;

def isReleaseBuild() {
    return distInfo.libraryVersion.contains("SNAPSHOT") == false
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = distInfo.publishedGroupId
                pom.artifactId = distInfo.artifact
                pom.version = distInfo.libraryVersion

                repository(url: distInfo.mavenReleaseRepo) {
                    authentication(userName: distInfo.mavenUser, password: distInfo.mavenPassword)
                }
                snapshotRepository(url: distInfo.mavenSnapshotRepo) {
                    authentication(userName: distInfo.mavenUser, password: distInfo.mavenPassword)
                }

                pom.project {
                    name distInfo.libraryName
                    packaging distInfo.libraryPackaging
                    description distInfo.libraryDescription
                    url distInfo.siteUrl

                    scm {
                        url distInfo.siteUrl
                        connection distInfo.gitUrl
                        developerConnection distInfo.gitUrl
                    }

                    licenses {
                        license {
                            name distInfo.licenseName
                            url distInfo.licenseUrl
                            distribution distInfo.licenseDist
                        }
                    }

                    developers {
                        developer {
                            id distInfo.developerId
                            name distInfo.developerName
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
    }
}